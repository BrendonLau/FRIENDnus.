{"version":3,"sources":["firebase.js","context/AuthContext.js","components/user/PrivateRoute.js","iconfinder-512.png","components/Layout/RequestProfile.js","components/Layout/FriendRequest.js","components/Layout/NavBar.js","components/Layout/FriendProfile.js","components/Layout/FriendList.js","components/user/chat2.js","components/user/grpchatindex.js","components/Layout/AddGroupList.js","components/Layout/ChatHistory.js","components/user/GroupChatInfo.js","components/user/groupchat.js","pages/Dashboard.js","components/user/user.js","components/user/Signup.js","pages/SignupPage.js","components/user/Login.js","pages/LoginPage.js","components/user/ForgotPassword.js","pages/ForgotPasswordPage.js","components/Layout/DisplayPhoto.js","components/user/Profile.js","pages/ProfilePage.js","components/Layout/MatchProfile.js","iconfinder-256.png","components/Layout/Match.js","pages/MatchPage.js","components/user/UpdateProfile.js","components/user/chat.js","App.js","reportWebVitals.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","onAuthStateChanged","user","useEffect","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updatePassword","updateEmail","Provider","PrivateRoute","Component","component","rest","render","props","to","RequestProfile","requestData","setRequestEmails","setFriends","disableBtn","setDisableBtn","handleAccept","a","array1","collection","where","get","then","snap","docs","forEach","doc","data","friendList","update","console","log","array2","message","success","firstName","newFriendList","includes","removeRequest","handleDelete","array","friendRequest","filter","style","borderBottom","borderColor","borderWidth","display","float","margin","width","src","image","icon","UserOutlined","marginTop","marginLeft","lastName","marginRight","justifyContent","Button","fontSize","height","size","disabled","onClick","variant","FriendRequest","userData","requests","setRequests","requestEmails","fetchRequests","catch","error","map","request","phone","NavBar","setError","setUserData","visibleDrawer","setVisibleDrawer","history","useHistory","showNoti","setShowNoti","push","fetchUserData","Navbar","collapseOnSelect","expand","bg","Brand","href","paddingLeft","Image","alt","Toggle","aria-controls","Collapse","id","Nav","className","placement","title","Link","FireOutlined","color","count","length","offset","BellOutlined","visible","onClose","HomeOutlined","NavDropdown","alignRight","Item","Divider","Alert","FriendProfile","friend","setChatData","setVisible","handleRemove","type","MessageOutlined","onCancel","e","footer","Card","borderRadius","border","padding","major","bio","interest","onConfirm","shape","FriendList","friends","searchTerm","setSearchTerm","placeholder","onChange","target","overflowY","maxHeight","val","toLowerCase","toLocaleLowerCase","ChatRoom","friendData","isFriend","receiver","disableAdd","setDisableAdd","addToChatList","chatList","tempChatList1","tempChatList2","collectionid","collectionid2","messagesRef","messageRef2","query","orderBy","limit","useCollectionData","idField","messages","formValue","setFormValue","sendMessage","preventDefault","add","text","createdAt","FieldValue","serverTimestamp","time","moment","format","uid","rid","handleAdd","isRequested","friendreq","i","AlwaysScrollToBottom","elementRef","useRef","current","scrollIntoView","ref","backgroundColor","position","textAlign","flexDirection","msg","ChatMessage","onSubmit","bottom","paddingTop","marginBottom","SendOutlined","UserAddOutlined","messageClass","name","fontFamily","index","chatName","userList","AddGroupList","setNewGrpIDs","newGrpIDs","visibleDrawer2","setVisibleDrawer2","addedFriends","setAddedFriends","groupName","setGroupName","handleCreateChat","chatID","addGrpToChatList","grpchatRef","set","groupChat","added","selected","find","per","f","handleAdded","ChatHistory","chatHist","groupList","friendEmails","setIsFriend","setGrpChatID","chatInfo","setChatInfo","groupChatInfo","setGroupChatInfo","displayGrpBtn","setDisplayGrpBtn","radioValue","setRadioValue","timeOut","setTimeout","list","chat","sort","b","seconds","fetchChat","clearTimeout","fetchGroupData","handleDate","date","split1","toDate","toString","split","substring","ButtonGroup","toggle","radio","idx","ToggleButton","checked","handleGroupButton","person","handleChat","TeamOutlined","GroupChatInfo","n","chatMember","setChatMember","visibleAddMember","setVisibleAddMember","remainingFriends","setRemainingFriends","showAddDrawer","chatMemberEmails","mem","handleLeave","window","location","reload","handleAddMemberDB","ListGroup","member","Groupchat","ID","first","setFirst","userName","setUserName","querySnapshot","fetchData","fetchName","members","join","Dashboard","chatData","setChatHist","setFriendEmails","setGroupList","grpChatID","frenList","gchatList","fetchChatList","CommentOutlined","Accordion","defaultActiveKey","as","Header","eventKey","userEntry","gender","Signup","emailRef","passwordRef","passwordConfirmRef","setEmail","setMessage","setFirstName","setLastName","setGender","handphone_Number","setNumber","Fragment","Body","Form","Group","Label","Control","required","SignupPage","Container","Login","LoginPage","ForgotPassword","ForgetPasswordPage","DisplayPhoto","profileImg","setProfileImg","modalImg","setModalImg","uploadImg","setUploadImg","loadingBar","setLoadingBar","handleOk","storageRef","storage","fileRef","child","put","getDownloadURL","fileUrl","fetchDP","onOk","maxWidth","img","files","URL","createObjectURL","Profile","ProfilePage","MatchProfile","alignItems","verticalAlign","okText","pathname","state","Match","matches","setMatches","userInterest","setUserInterest","loader","setLoader","displayMessage","setDisplayMessage","displaySecMessage","setDisplaySecMessage","handleClick","match","uInterest","mInterest","mEmail","Heading","MatchPage","UpdateProfile","setMajor","number","setInterest","setBio","promises","Promise","all","finally","defaultValue","App","exact","path","ForgotPasswordPage","Chat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7883235e.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\"\r\n\r\nvar firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\r\n}\r\nconst app = firebase.initializeApp(firebaseConfig)\r\nconst db = firebase.firestore()\r\nconst auth = app.auth();\r\nexport { app, auth};\r\nexport default db;","import React, { useContext, useState, useEffect } from 'react'\r\nimport { auth } from '../firebase'\r\n\r\n//Allows data to be accessible by many components\r\nconst AuthContext = React.createContext()\r\n\r\n/**\r\n * This function will trigger a rerender with latest\r\n * context value\r\n * \r\n * @returns current context values for the current user\r\n */\r\nexport function useAuth() {\r\n    return useContext(AuthContext)\r\n}\r\n\r\n/**\r\n * This function handles all methods regarding to users\r\n */\r\nexport function AuthProvider({ children }) {\r\n    //state of current user\r\n    const [currentUser, setCurrentUser] = useState()\r\n    //stop updating when there is a user \r\n    const [loading, setLoading] = useState(true)\r\n    \r\n    function signup(email, password) {\r\n        return auth.createUserWithEmailAndPassword(email, password)\r\n    }\r\n\r\n    function login(email, password) {\r\n        return auth.signInWithEmailAndPassword(email, password)\r\n    }\r\n\r\n    function logout() {\r\n        return auth.signOut()\r\n    }\r\n\r\n    function resetPassword(email) {\r\n        return auth.sendPasswordResetEmail(email)\r\n    }\r\n\r\n    function updateEmail(email) {\r\n        return currentUser.updateEmail(email)\r\n    }\r\n\r\n    function updatePassword(password) {\r\n        return currentUser.updatePassword(password)\r\n    }\r\n\r\n    // set the the new user as the current user whenever\r\n    // there is a change in state\r\n    auth.onAuthStateChanged(user => {\r\n        setCurrentUser(user)\r\n    })\r\n    \r\n    //stop updating when there is a user \r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n            setCurrentUser(user)\r\n            setLoading(false)\r\n        })\r\n\r\n        return unsubscribe\r\n    }, [])\r\n\r\n    // value contains all the information of the user that can be shared globally\r\n    // with other components\r\n    const value = {\r\n        currentUser,\r\n        signup,\r\n        login,\r\n        logout,\r\n        resetPassword,\r\n        updatePassword,\r\n        updateEmail\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Route, Redirect } from \"react-router-dom\"\r\nimport { useAuth } from \"../../context/AuthContext\"\r\n\r\n/**\r\n * This route redirects the user to the dashboard when signed in successfully.  \r\n */\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n  const { currentUser } = useAuth()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/login\" />\r\n      }}\r\n    ></Route>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/iconfinder-512.02823358.png\";","import React, {useState} from 'react'\r\nimport { Avatar } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport db from '../../firebase.js'\r\nimport { message } from 'antd'\r\n\r\nconst RequestProfile = ({ requestData, setRequestEmails, setFriends }) => {\r\n    const [disableBtn, setDisableBtn] = useState(false)\r\n    const { currentUser } = useAuth()\r\n\r\n    const handleAccept = async () => {\r\n        setDisableBtn(true)\r\n\r\n\r\n        var array1 = []\r\n        // add friend to current user friendList\r\n        await db.collection('users')\r\n        .where('email', '==', currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                array1 = doc.data().friendList\r\n            })\r\n        })\r\n        array1 = [...array1, requestData.email]\r\n\r\n        await db.collection('users')\r\n        .doc(currentUser.email)\r\n        .update({friendList: array1})\r\n        .then(() => console.log('friend is added successfully added to currentUser'))\r\n\r\n        var array2 = []\r\n        // add friend to current user friendList\r\n        await db.collection('users')\r\n        .where('email', '==', requestData.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                array2 = doc.data().friendList\r\n            })\r\n        })\r\n        array2 = [...array2, currentUser.email]\r\n\r\n        await db.collection('users')\r\n        .doc(requestData.email)\r\n        .update({friendList: array2})\r\n        .then(() => console.log('friend is added successfully added to receiver'))\r\n\r\n        message.success(requestData.firstName + \" is added successfully!\", [4])\r\n        \r\n        // Add friend from the UI\r\n        // fetch all the data in the friend list\r\n        var newFriendList = [] \r\n        await db.collection(\"users\")\r\n        .where(\"email\",\"!=\", currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n\r\n            // append data into array if it is in the friend list\r\n                if (array1.includes(doc.data().email)) {\r\n                    newFriendList = [...newFriendList, doc.data()]\r\n                }\r\n\r\n            })\r\n        })\r\n        .then(() => console.log(\"successfully read all in friendlist\"))\r\n        setFriends(newFriendList)        \r\n\r\n        // remove request from database\r\n        removeRequest()\r\n        setDisableBtn(false)\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        setDisableBtn(true)\r\n        // remove request from database\r\n        removeRequest()\r\n        setDisableBtn(false)\r\n    }\r\n\r\n    async function removeRequest() {\r\n        var array = []\r\n        await db.collection('users')\r\n        .where('email', '==', currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n               array = doc.data().friendRequest\r\n            })\r\n        })\r\n        .then(() => console.log(\"Fetched request array\"))\r\n\r\n        // remove email\r\n        array = array.filter(email => {\r\n            if (email !== requestData.email) {\r\n                return email;\r\n            }\r\n            return false;\r\n        })\r\n\r\n        await db.collection('users')\r\n        .doc(currentUser.email)\r\n        .update({friendRequest: array})\r\n        .then(() => console.log(\"Request removed\"))\r\n        setRequestEmails(array)\r\n    }\r\n\r\n    return(<div style={{borderBottom:'solid', borderColor:'#ebebeb', borderWidth:'0.5px', display:'flex'}}>\r\n            <div style={{float:'left', margin:\"2%\", width:'10%'}}>\r\n                <Avatar src={requestData.image} icon={<UserOutlined/>}></Avatar>\r\n            </div>\r\n            <div style={{float:'left', marginTop:'3%', marginLeft:'2%', width:'40%'}}>\r\n                <p>{requestData.firstName + \" \" + requestData.lastName}</p>\r\n            </div>\r\n            <div style={{float:'right', width:'35%', display:'flex', marginRight:'1%', marginTop:'3%', justifyContent:'space-between'}}>\r\n                <Button style={{fontSize:'10px', height:'25px'}} size='sm' disabled={disableBtn}\r\n                onClick={handleAccept}\r\n                >Accept\r\n                </Button>\r\n                <Button style={{fontSize:'10px', height:'25px'}} variant='light' size='sm' disabled={disableBtn}\r\n                onClick={handleDelete}\r\n                >Delete\r\n                </Button>\r\n            </div>\r\n        </div>)\r\n}\r\nexport default RequestProfile","import React, {useEffect, useState} from 'react'\r\nimport RequestProfile from './RequestProfile.js'\r\nimport db from '../../firebase.js'\r\n\r\nconst FriendRequest = ({ userData, setFriends }) => {\r\n    const [requests, setRequests] = useState([])\r\n    const [requestEmails, setRequestEmails] = useState([])\r\n\r\n    useEffect(() => {\r\n        const setReq = () => {\r\n            setRequestEmails(userData.friendRequest)\r\n        }\r\n        setReq()\r\n    }, [userData.friendRequest])\r\n\r\n    useEffect(() => {\r\n        const fetchRequests = async () => {\r\n            setRequests([])\r\n            await db.collection(\"users\")\r\n            .get()\r\n            .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                    if(requestEmails.includes(doc.data().email)) {\r\n                        setRequests(requests => [...requests, doc.data()])\r\n                    }\r\n               })\r\n           })\r\n            .then(() => console.log(\"successfully read all requests\"))\r\n            .catch((error) => console.log(\"Error in reading requests :\", error))\r\n        }\r\n        if (requestEmails) fetchRequests()\r\n        \r\n    }, [requestEmails])\r\n\r\n\r\n    return(<div>\r\n            {\r\n              requests.map(request => (\r\n                  <RequestProfile key={request.firstName + requests.phone} \r\n                  setRequestEmails={setRequestEmails}\r\n                  requestData={request} \r\n                  setFriends={setFriends}/>\r\n              ))  \r\n            }\r\n        </div>)\r\n}\r\nexport default FriendRequest\r\n","import React, { useState, useEffect } from 'react'\r\nimport {Navbar, Nav, NavDropdown, Alert} from \"react-bootstrap\"\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { HomeOutlined, UserOutlined, FireOutlined, BellOutlined } from '@ant-design/icons'\r\nimport { Avatar, Tooltip, Drawer, Badge } from 'antd'\r\nimport db from '../../firebase'\r\nimport Image from \"../../iconfinder-512.png\"\r\nimport FriendRequest from './FriendRequest'\r\n\r\n\r\n  const NavBar = ({ setFriends }) => {\r\n   const [error, setError] = useState('')\r\n   const [userData, setUserData] = useState('')\r\n   const [visibleDrawer, setVisibleDrawer] = useState(false)\r\n   const { logout, currentUser } = useAuth()\r\n   const history = useHistory()\r\n\r\n   const [showNoti, setShowNoti] = useState(true)\r\n\r\n   useEffect(() => {\r\n    const fetchUserData = async () =>{\r\n        await db.collection(\"users\")\r\n        .where(\"email\",\"==\", currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                setUserData(doc.data()) \r\n            })\r\n        })\r\n        .then(() => console.log(\"successfully read profile photo for menu\"))\r\n        .catch((error) => console.log(\"Error in reading profile photo for menu\", error))\r\n    }\r\n    fetchUserData()\r\n  }, [currentUser.email])\r\n\r\n   async function handleLogout() {\r\n      setError('')\r\n      try {\r\n          await logout\r\n          history.push('/login')\r\n          setError(\"Hello\")\r\n      } catch (error) {\r\n          setError(error.message)\r\n      }\r\n    }\r\n\r\n    const handleDrawer = () => {\r\n      setVisibleDrawer(true)\r\n    }\r\n\r\n    const handleCloseDrawer = () => {\r\n      setShowNoti(false)\r\n      setVisibleDrawer(false)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Navbar collapseOnSelect expand=\"xl\" bg=\"primary\" variant=\"dark\">  \r\n           <Navbar.Brand href=\"/\" style={{paddingLeft: \"8%\"}}> \r\n            <img src={Image} alt=\"\" style={{width:'32px', height:'32px'}}/>FRIENDnus\r\n           </Navbar.Brand>\r\n           <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n           <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"justify-content-end\" style={{ width: \"88%\" }}>\r\n                <Tooltip placement='bottom' title='match'>\r\n                  <Badge><Nav.Link href=\"/match\"><FireOutlined style={{fontSize:'24px', color:'white'}}/></Nav.Link></Badge>\r\n                </Tooltip>\r\n                <Badge count={showNoti ? userData && userData.friendRequest.length: 0} size='small' offset={[-7,7]}>\r\n                   <Nav.Link onClick={handleDrawer}><BellOutlined style={{fontSize:'24px', color:'white'}}/></Nav.Link>\r\n                </Badge>\r\n                <Drawer title=\"Friend Request\" width=\"350px\" visible={visibleDrawer} onClose={handleCloseDrawer}>\r\n                   <FriendRequest setFriends={setFriends} userData={userData}/>\r\n                </Drawer>\r\n                <Tooltip placement='bottom' title='home'>\r\n                  <Badge><Nav.Link href='/'><HomeOutlined style={{fontSize:'24px', color:'white'}}/></Nav.Link></Badge>\r\n                </Tooltip>\r\n                <NavDropdown title={<Avatar size={25} icon={<UserOutlined/>} src={userData.image}/>} id=\"collasible-nav-dropdown\" alignRight>\r\n                    <NavDropdown.Item href=\"/profile\">Profile</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"/login\" onClick={handleLogout}>Log Out</NavDropdown.Item>\r\n                </NavDropdown>\r\n              </Nav>\r\n           </Navbar.Collapse>\r\n        </Navbar>\r\n        {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      </div>\r\n      )\r\n    }\r\nexport default NavBar ","import React, { useState } from \"react\"\r\nimport { Card } from 'react-bootstrap'\r\nimport { Avatar, Button, Modal, Popconfirm, message } from 'antd'\r\nimport { UserOutlined, MessageOutlined, VideoCameraOutlined } from '@ant-design/icons'\r\nimport db from '../../firebase.js'\r\nimport { useAuth } from '../../context/AuthContext'\r\n\r\n\r\nexport default function FriendProfile({ friend, setChatData, setFriends}) {\r\n    const [visible, setVisible] = useState(false)\r\n    const [disableBtn, setDisableBtn] = useState(false)\r\n    const { currentUser } = useAuth()\r\n\r\n    const showModal = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const handleChat = () => {\r\n        setChatData(friend)\r\n    }\r\n\r\n    const handleRemove = async() => {\r\n        setDisableBtn(true)\r\n\r\n        var array1 = []\r\n        await db.collection('users')\r\n        .where('email', '==', currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                array1 = doc.data().friendList\r\n                array1 = array1.filter(email => {\r\n                    if (email !== friend.email) return email\r\n                    else return false \r\n                })\r\n            })\r\n        })\r\n        await db.collection('users')\r\n        .doc(currentUser.email)\r\n        .update({friendList: array1})\r\n        .then(() => console.log('friend removed from user.'))\r\n\r\n        var array2 = []\r\n        await db.collection('users')\r\n        .where('email', '==', friend.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                array2 = doc.data().friendList\r\n                array2 = array2.filter(email => {\r\n                    if (email !== currentUser.email) return email\r\n                    else return false \r\n                })\r\n            })\r\n        })\r\n        await db.collection('users')\r\n        .doc(friend.email)\r\n        .update({friendList: array2})\r\n        .then(() => console.log('user removed from removed friend.'))\r\n\r\n        // remove friend from the UI\r\n        // fetch all the data in the friend list\r\n        var newFriendList = [] \r\n        await db.collection(\"users\")\r\n        .where(\"email\",\"!=\", currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n            // append data into array if it is in the friend list\r\n                if (array1.includes(doc.data().email)) {\r\n                    newFriendList = [...newFriendList, doc.data()]\r\n                }\r\n\r\n            })\r\n        })\r\n        .then(() => console.log(\"successfully read all in friendlist\"))\r\n        setFriends(newFriendList)        \r\n        message.success(friend.firstName + \" is removed successfully.\", [4])\r\n        setDisableBtn(false)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <div style={{borderBottom:'solid', borderColor:'#ebebeb', borderWidth:'0.5px', display:'flex'}}>\r\n            <div style={{float:'left', marginTop:'2%', marginRight:'1%', marginLeft:'2%', width:'10%'}}>\r\n                <Avatar src={friend.image} icon={<UserOutlined/>}></Avatar>\r\n            </div>\r\n            <div onClick={showModal} style={{float:'left', marginTop:'2.5%', width:'80%'}}>\r\n                <p>{friend.firstName + \" \" + friend.lastName}</p> \r\n            </div>\r\n            <div style={{float:'right', width:'10%', marginTop:'0.5%', display:'flex', marginRight:'3%', justifyContent:'space-between'}}>\r\n                <Button type='link' size='large' icon={<MessageOutlined/>}\r\n                onClick={handleChat}\r\n                ></Button>\r\n            </div>   \r\n        </div>\r\n        \r\n        <Modal visible={visible} onCancel={(e) => {setVisible(false)}} footer={null}>\r\n            <Card style={{borderRadius:'10px', display:'flex'}} border=\"dark\">\r\n                <div>\r\n                    <div style={{float:'left', padding:'2%'}}>\r\n                        <Avatar size={100} src={friend.image} icon={<UserOutlined/>}></Avatar>\r\n                    </div>       \r\n                    <div style={{padding:\"2%\", marginTop:'4%'}}>\r\n                        <p style={{display:\"block\"}}><strong>{friend.firstName + \" \" + friend.lastName}</strong></p>\r\n                        <p>{friend.major}</p>\r\n                    </div>\r\n                </div>   \r\n                 <hr/>\r\n                <div style={{margin:'2%'}}>\r\n                    <h6>Bio: </h6><p>{friend.bio}</p>\r\n                    <h6>Interests: </h6><p> {friend.interest} </p>\r\n                    <p><strong>Email: </strong>{friend.email}</p>\r\n                </div>\r\n            </Card>\r\n            <Popconfirm title='Are you sure?' disabled={disableBtn} onConfirm={handleRemove}>\r\n                <Button style={{marginTop:'2%'}} type='primary' shape='round'>\r\n                    remove friend\r\n                </Button>\r\n            </Popconfirm>\r\n        </Modal>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\"\r\nimport FriendProfile from './FriendProfile'\r\n\r\nexport default function FriendList({ setChatData, friends, setFriends }) {\r\n    \r\n    const [searchTerm, setSearchTerm] = useState('')\r\n   \r\n    return(\r\n        <div> \r\n            <div style={{borderBottom:'solid', borderColor:'#ebebeb'}}>\r\n                <input type='text' placeholder='Search...' style={{borderWidth:'0px', width:'100%'}}\r\n                onChange={e => {setSearchTerm(e.target.value)}}\r\n                ></input>\r\n            </div>\r\n            \r\n            <div style={{overflowY:\"auto\", maxHeight: \"400px\"}} >\r\n                {\r\n                    friends.filter((val) => {\r\n                        if (searchTerm === \"\") {\r\n                            return val\r\n                        } else if (val.firstName.toLowerCase().includes(searchTerm.toLocaleLowerCase())\r\n                            || val.lastName.toLowerCase().includes(searchTerm.toLowerCase())\r\n                        ) {\r\n                            return val\r\n                        } \r\n                        return false\r\n                    }).map(friend => (\r\n                       <FriendProfile key={friend.phone + friend.lastName} \r\n                       friend={friend} \r\n                       setChatData={setChatData}\r\n                       setFriends={setFriends}\r\n                       ></FriendProfile>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","\r\nimport React, { useState, useRef, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport db, { auth } from \"../../firebase.js\"\r\nimport firebase from 'firebase/app';\r\nimport { Avatar, message } from 'antd'\r\nimport { UserOutlined, SendOutlined, UserAddOutlined } from '@ant-design/icons'\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\r\nimport '../../style/css/chat.css'\r\n      \r\n\r\n        export default function ChatRoom({ friendData, isFriend }) {\r\n            const receiver = friendData\r\n            const { currentUser } = useAuth()\r\n            const [disableAdd, setDisableAdd] = useState(false)\r\n\r\n            const addToChatList = async () => {\r\n              if (!(receiver.chatList.includes(currentUser.email))){\r\n                // add currentuser email to receiver chat history \r\n                var tempChatList1 = receiver.chatList \r\n                tempChatList1.push(currentUser.email)\r\n                await db.collection('users') \r\n                  .doc(receiver.email) \r\n                  .update({chatList: tempChatList1})\r\n                \r\n                // query currentUser chatList \r\n                var tempChatList2 = []\r\n                await db.collection('users')\r\n                  .where('email', '==', currentUser.email)\r\n                  .get()\r\n                  .then(snap => {\r\n                    snap.docs.forEach(doc => {\r\n                      tempChatList2 = doc.data().chatList\r\n                    })\r\n                  }) \r\n                \r\n                // update currentUser chatList\r\n                tempChatList2.push(receiver.email)\r\n                await  db.collection('users') \r\n                  .doc(currentUser.email) \r\n                  .update({chatList: tempChatList2})\r\n                \r\n                console.log(\"new chat added\")\r\n              }\r\n            }\r\n\r\n            const collectionid = receiver.email + currentUser.email\r\n            const collectionid2 = currentUser.email + receiver.email\r\n           \r\n            const messagesRef = db.collection(\"chats\").doc(\"all\").collection(collectionid)\r\n            const messageRef2 = db.collection(\"chats\").doc(\"all\").collection(collectionid2)\r\n\r\n            const query = messagesRef.orderBy('createdAt').limit(25);\r\n            const [messages] = useCollectionData(query, { idField: 'id' });\r\n            const [formValue, setFormValue] = useState('');\r\n\r\n          \r\n            const sendMessage = async (e) => {\r\n              e.preventDefault();\r\n              \r\n              // add chat to chat history\r\n              addToChatList()\r\n              \r\n              const message = formValue\r\n              setFormValue('');\r\n\r\n              await messagesRef.add({\r\n                text: message,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                time: moment().format('HH:mm'),\r\n                uid: currentUser.email,\r\n                rid: receiver.email,\r\n                \r\n\r\n              })\r\n              await messageRef2.add({\r\n                text: message,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                time: moment().format('HH:mm'),\r\n                uid: currentUser.email,\r\n                rid: receiver.email,\r\n              })\r\n          \r\n              \r\n            }\r\n\r\n            const handleAdd = async() => {\r\n              setDisableAdd(true)\r\n              var array = []\r\n              var isRequested = false\r\n              await db.collection('users')\r\n              .where('email', '==', receiver.email)\r\n              .get()\r\n              .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                  const friendreq = doc.data().friendRequest\r\n                  for (var i = 0; i < friendreq.length; i++) {\r\n                    if (friendreq[i] === currentUser.email) {\r\n                      message.error(\"Request is already sent.\", [2])\r\n                      isRequested = true\r\n                      break;\r\n                    }\r\n                  }\r\n                 if (!isRequested) array = [...friendreq, currentUser.email]\r\n                });\r\n              })\r\n              .then(() => console.log(\"fetched friend request.\"))\r\n\r\n              if (!isRequested) {\r\n                await db.collection('users')\r\n                .doc(receiver.email)\r\n                .update({friendRequest: array})\r\n                .then(() => console.log('friend request is added successfully.'))\r\n                message.success(\"Request has been sent.\", [4])\r\n              }\r\n              setDisableAdd(false)\r\n            }\r\n\r\n            const AlwaysScrollToBottom = () => {\r\n              const elementRef = useRef();\r\n              useEffect(() => elementRef.current.scrollIntoView())\r\n              return <div ref={elementRef} />\r\n            }\r\n          \r\n            return (\r\n              <div style={{border:'solid', borderWidth:'0.2px', borderColor:'#d9d9d9', height:'100%'}}>\r\n                 <div style={{display:'flex', borderWidth:'0.02px', border:'solid', borderColor:'#e3e3e3', backgroundColor:'#fbfbfb'}}>\r\n                   <div style={{float:'left', margin:'1%', marginLeft:'3%'}}>\r\n                      <Avatar size={50} src={receiver.image} icon={<UserOutlined/>}></Avatar>\r\n                   </div> \r\n                   <div style={{float:'left', marginTop:'2.5%', marginLeft:'3%'}}> \r\n                      <h4 className=\"mb-4\">{receiver.firstName + \" \" + receiver.lastName}</h4> \r\n                   </div>\r\n                 </div>\r\n              <div style={{height:'80vh', position:'relative', textAlign:'center'}}>\r\n                <main style={{overflowY:'auto', maxHeight:'76vh', flexDirection: \"column\"}}>\r\n                  {messages && messages.map(msg => <ChatMessage key={msg.id} id = {msg.id} message={ msg} time = {msg.createdAt} />)}\r\n                  <AlwaysScrollToBottom/>\r\n                </main>\r\n                  <form onSubmit={sendMessage} style={{position:'absolute', bottom:'0px', display:'flex', width:'100%', paddingTop:'0px'}}>\r\n                    <input type='text' style={{borderWidth:'0.5px', borderRadius:'20px', marginLeft:'1%',\r\n                    width:'94%', float:'left'}} value={formValue} \r\n                    onChange={(e) => setFormValue(e.target.value)} placeholder=\"  say something nice\" />\r\n                    <button type=\"submit\" style={{borderWidth:'0px', float:'right', marginBottom:'0px', width:'6%', backgroundColor:'transparent'}} disabled={!formValue}>\r\n                    <SendOutlined size={24}/>\r\n                    </button>\r\n                    {isFriend && <button disabled={disableAdd} style={{borderWidth:'0px', float:'right', backgroundColor:'transparent', marginRight:'2%'}}\r\n                    onClick={handleAdd}>\r\n                      <UserAddOutlined/>\r\n                    </button> }\r\n                  </form>     \r\n                </div>\r\n            </div>)\r\n          }\r\n\r\n          function ChatMessage(props) {\r\n            const {time, text, uid } = props.message;\r\n          \r\n            const messageClass = uid === auth.currentUser.email ? 'sent' : 'received';\r\n          \r\n            return (<div>\r\n              <div className={`message ${messageClass}`}>\r\n                <p  name=\"p-message\"> {text } <span style={{fontSize:'10px', fontFamily:'Courier New'}}>{ time}</span></p>\r\n              </div>\r\n            </div>)\r\n          }\r\n\r\n","var index ={\r\n    text: \"Welcome to your group chat!\",\r\n              createdAt:\" \",\r\n              time: \"\",\r\n              uid: \"System\",\r\n              rid: \" \", \r\n              chatName: \"\",\r\n              userList : []\r\n    }\r\nexport default index;","import React, {useEffect, useState} from 'react'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport db from '../../firebase.js'\r\nimport { Avatar, Drawer } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { Button } from 'react-bootstrap'\r\nimport firebase from 'firebase/app';\r\nimport moment from 'moment';\r\nimport index from '../user/grpchatindex';\r\n\r\n\r\nconst AddGroupList = ({ setVisibleDrawer, setNewGrpIDs, newGrpIDs}) => {\r\n    \r\n    const [friends, setFriends] = useState([])\r\n    const { currentUser } = useAuth()\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n    const [visibleDrawer2, setVisibleDrawer2] = useState(false)\r\n\r\n    // data for group chat\r\n    const [addedFriends, setAddedFriends] = useState([])\r\n    const [groupName, setGroupName] = useState('')\r\n\r\n    useEffect(() => {\r\n        const fetchUserData = async () =>{\r\n            // fetch user friend list\r\n\r\n            //fetch user  friend list\r\n            var friendList = []\r\n            await db.collection(\"users\")\r\n            .where(\"email\",\"==\", currentUser.email)\r\n            .get()\r\n            .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                    friendList = doc.data().friendList\r\n                })\r\n            })\r\n\r\n            // fetch all the data in the friend list \r\n            await db.collection(\"users\")\r\n            .where(\"email\",\"!=\", currentUser.email)\r\n            .get()\r\n            .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                    // append data into array if it is in the friend list\r\n                    if (friendList.includes(doc.data().email)) {\r\n                        setFriends(friends => [...friends, doc.data()])\r\n                    }\r\n                })\r\n            })\r\n            .then(() => console.log(\"successfully read all in friendlist\"))\r\n            .catch((error) => console.log(\"Error in reading friendlist:\", error))\r\n        }\r\n        // reset array\r\n        if(friends.length === 0 && addedFriends.length === 0) {\r\n            setFriends([])\r\n            fetchUserData()\r\n        }\r\n\r\n    }, [currentUser.email, friends.length, addedFriends.length])\r\n   \r\n\r\n    const handleAdd = (email) => {\r\n        const selected = friends.find(per => {\r\n            return per.email === email ? per: false\r\n         })\r\n         // remove from friends\r\n         setFriends(friends.filter(f => {\r\n             return f.email === email ? false : f\r\n         }))\r\n\r\n         // add selected to addedfriend\r\n         setAddedFriends(addedFriends => [...addedFriends, selected])\r\n    }\r\n\r\n    const handleAdded = (email) => {\r\n        const selected = addedFriends.find(per => {\r\n            return per.email === email ? per: false\r\n         })\r\n\r\n         // remove from addedfriends\r\n         setAddedFriends(addedFriends.filter(f => {\r\n            return f.email === email ? false : f\r\n        }))\r\n\r\n        // add friend to friends\r\n        setFriends(friends => [...friends, selected])\r\n    }\r\n\r\n    const handleDrawer = () => {\r\n        setVisibleDrawer2(true)\r\n    }\r\n\r\n    const handleCreateChat = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        var tempChatList2 = []\r\n        await db.collection('users')\r\n          .where('email', '==', currentUser.email)\r\n          .get()\r\n          .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n              tempChatList2 = doc.data().chatList\r\n            })\r\n          }) \r\n          \r\n        \r\n        var chatID = \"GROUP\" + currentUser.email + groupName\r\n        while (tempChatList2.includes(chatID)){ \r\n            chatID = chatID + \"i\"\r\n            console.log(chatID)\r\n          }\r\n        \r\n        \r\n        const addGrpToChatList = async (receiver) => { \r\n            var tempChatList1 = receiver.chatList  \r\n            tempChatList1.push(chatID) \r\n            await db.collection('users')  \r\n              .doc(receiver.email)  \r\n              .update({chatList: tempChatList1}) \r\n            var tempChatList2 = [] \r\n            await db.collection('users') \r\n              .where('email', '==', currentUser.email) \r\n              .get() \r\n              .then(snap => { \r\n                snap.docs.forEach(doc => { \r\n                  tempChatList2 = doc.data().chatList \r\n                }) \r\n              })  \r\n            tempChatList2.push(chatID) \r\n            await  db.collection('users')  \r\n              .doc(currentUser.email)  \r\n              .update({chatList: tempChatList2}) \r\n            console.log(\"new chat added\") \r\n          \r\n        }\r\n        const groupChat = async () => {\r\n\r\n            for(let i = 0; i<addedFriends.length ; i ++){\r\n                var receiver = addedFriends[i]\r\n                addGrpToChatList(receiver);\r\n            }\r\n           \r\n  \r\n           const grpchatRef = db.collection(\"chats\").doc(\"all\").collection(chatID)\r\n           index.createdAt = firebase.firestore.FieldValue.serverTimestamp()\r\n           index.time = moment().format('HH:mm')\r\n           index.chatName = groupName\r\n           index.userList = addedFriends\r\n           grpchatRef.doc(\"index\").set(index)\r\n\r\n           // add to chat history\r\n           setNewGrpIDs([chatID, ...newGrpIDs])\r\n        }\r\n        groupChat()\r\n\r\n\r\n        \r\n\r\n        // reset to default\r\n        setVisibleDrawer(false)\r\n        setVisibleDrawer2(false)\r\n        setFriends([])\r\n        setAddedFriends([])\r\n        setGroupName('')\r\n    }\r\n  \r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n          \r\n                {addedFriends.length !== 0 && <Button style={{width:'100%', border:'0px', borderRadius:'10px', marginBottom:'5%'}} \r\n                    variant='secondary' onClick={handleDrawer}> \r\n                    next ⋗\r\n                </Button>}\r\n\r\n                {\r\n                    addedFriends.map(added => (\r\n                        <Button variant='outline-secondary' style={{borderRadius:'20px', height:'40px'}} \r\n                        key={added.phone + added.lastName} onClick={() => handleAdded(added.email)}>\r\n                            <p>{added.firstName + \" \" + added.lastName} <b> x</b></p>\r\n                        </Button>\r\n                    ))\r\n                }\r\n            </div>\r\n            {addedFriends.length !== 0 && <br/>}\r\n\r\n            <Drawer title=\"New Group\" visible={visibleDrawer2} placement='left' \r\n            onClose={() => setVisibleDrawer2(false)} width='450px'>\r\n                <form onSubmit={handleCreateChat} style={{textAlign:'center'}}>\r\n                    <input placeholder=' group subject' style={{width:'100%'}}\r\n                    onChange={e => setGroupName(e.target.value)} value={groupName}></input>\r\n                    <Button type='submit' width='20%' variant='secondary'\r\n                    style={{borderRadius:'50px', marginTop:'10%'}}>create</Button>\r\n                </form> \r\n            </Drawer>\r\n\r\n            <div style={{borderBottom:'solid', borderColor:'#ebebeb'}}>\r\n                <input type='text' placeholder='Type friend name' style={{borderWidth:'0px', width:'100%'}}\r\n                onChange={e => {setSearchTerm(e.target.value)}}\r\n                ></input>\r\n            </div>\r\n            <br/>\r\n                {\r\n                    friends.filter((val) => {\r\n                        if (searchTerm === \"\") {\r\n                            return val\r\n                        } else if (val.firstName.toLowerCase().includes(searchTerm.toLocaleLowerCase())\r\n                            || val.lastName.toLowerCase().includes(searchTerm.toLowerCase())\r\n                        ) {\r\n                            return val\r\n                        } \r\n                        return false\r\n                    }).map(friend => (\r\n                        <Button variant='outline-secondary' style={{width:'100%', backgroundColor:'transparent', borderWidth:'0px'}}\r\n                        key={friend.major + friend.lastName} onClick={() => handleAdd(friend.email)}>\r\n                            <div style={{float:'left', marginRight:'5%'}}>\r\n                                <Avatar size={45} src={friend.image} icon={<UserOutlined/>}></Avatar>\r\n                            </div>\r\n                            <div style={{textAlign:'left', marginTop:'3.2%'}}>\r\n                                <h6>{friend.firstName + \" \" + friend.lastName}</h6>\r\n                            </div>\r\n                        </Button>\r\n                    ))\r\n                }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddGroupList","import { UserOutlined, TeamOutlined } from '@ant-design/icons'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { Avatar, Drawer } from 'antd'\r\nimport db from \"../../firebase.js\"\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport { ButtonGroup, ToggleButton, Button } from 'react-bootstrap'\r\nimport AddGroupList from './AddGroupList.js'\r\n\r\nconst ChatHistory = ({ chatHist, groupList, setChatData, friendEmails, setIsFriend, setGrpChatID}) => {\r\n    const { currentUser } = useAuth()\r\n    const [chatInfo, setChatInfo] = useState([])\r\n\r\n    //group info\r\n    const [groupChatInfo, setGroupChatInfo] = useState([])\r\n\r\n    //display new group\r\n    const [newGrpIDs, setNewGrpIDs] = useState([])\r\n\r\n    // displaying add group\r\n    const [displayGrpBtn, setDisplayGrpBtn] = useState(false)\r\n    const [visibleDrawer, setVisibleDrawer] = useState(false)\r\n\r\n    // for button group\r\n    const [radioValue, setRadioValue] = useState('1');\r\n\r\n    const radios = [\r\n        { name: ' All', value: '1' },\r\n        { name: ' Friends', value: '2' },\r\n        { name: ' Groups', value: '3' },\r\n      ];\r\n\r\n    const handleChat = (e) => {\r\n        if (radioValue === '1' || radioValue === '2'){\r\n        const selected = chatHist.find(per => {\r\n           return per.email === e ? per: false\r\n        })\r\n        try {\r\n        setIsFriend(!friendEmails.includes(selected.email))\r\n        } \r\n        catch (e) {\r\n            console.log('error reading chat')\r\n        }\r\n        setGrpChatID('')\r\n        setChatData(selected)\r\n\r\n        } else {\r\n            setChatData('')\r\n            setGrpChatID(e)\r\n        }\r\n    }\r\n\r\n    // fetch personal chat data\r\n     useEffect(() => {\r\n        const timeOut = setTimeout(() => { \r\n        const fetchChat = async () => {\r\n            var list = []\r\n            await chatHist.map(chat =>{ \r\n                 db.collection('chats')\r\n                .doc('all')\r\n                .collection(currentUser.email + chat.email)\r\n                .orderBy('createdAt', 'desc').limit(1)\r\n                .get()\r\n                .then(snap => {\r\n                    snap.docs.forEach(doc => {\r\n                        const per = doc.data()\r\n                        per['name'] = chat.firstName + \" \" + chat.lastName\r\n                        per['image'] = chat.image\r\n                        list =  [...list, per]   \r\n                        \r\n \r\n                        if (list.length === chatHist.length) {\r\n                           list.sort((a, b) => b.createdAt.seconds - a.createdAt.seconds)\r\n                            setChatInfo(list)\r\n                        } \r\n                    })\r\n                })\r\n                return chat\r\n            })\r\n         }\r\n         \r\n\r\n         if (radioValue !== '3') {\r\n            fetchChat()\r\n         } \r\n\r\n\r\n         console.log('trigger ' + 10 )\r\n         //set timer, load it instant if havent been loaded else rerender every 5s\r\n        }, chatInfo.length === chatHist.length ? 10000 : 500)\r\n\r\n        return () => clearTimeout(timeOut)\r\n     }, [chatHist, currentUser.email, chatInfo, radioValue])\r\n\r\n     // fetch group chat data\r\n     useEffect(() => {\r\n            const fetchGroupData = async () => {\r\n                // if got more groups are created \r\n                for (var i = 0; i < newGrpIDs.length; i++) {\r\n                    groupList = [newGrpIDs[i], ...groupList]\r\n                }\r\n            \r\n                var list = []\r\n                try {\r\n                await groupList.map(chat =>{ \r\n                    db.collection('chats')\r\n                   .doc('all')\r\n                   .collection(chat)\r\n                   .orderBy('createdAt', 'desc').limit(1)\r\n                   .get()\r\n                    .then(snap => {\r\n                       snap.docs.forEach(doc => {\r\n                           const per = doc.data()\r\n                           per.rid = chat\r\n                           per.name = per.chatName\r\n                           list =  [...list, per]\r\n                           if (list.length === groupList.length && list[0].createdAt !== null) {\r\n                               list.sort((a, b) => b.createdAt.seconds - a.createdAt.seconds)\r\n                           } \r\n                           \r\n                        setGroupChatInfo(list)\r\n                        if (newGrpIDs.length > 0) {\r\n                            setChatInfo(list)\r\n                        }\r\n                       })\r\n                   })\r\n                   return chat\r\n                })\r\n                } catch (e) { \r\n                    // console.log (e)\r\n                    console.log('error reading grouplist in chatHistory')\r\n                }\r\n            }\r\n            \r\n            if (groupChatInfo.length !== groupList.length || newGrpIDs !== []) {\r\n                fetchGroupData()\r\n            } \r\n            if (radioValue === '3') {\r\n                setChatInfo(groupChatInfo)\r\n            }\r\n            \r\n     }, [groupList, radioValue, currentUser.email, newGrpIDs])\r\n\r\n\r\n     const handleGroupButton = (e) => {\r\n        // set the button mode to All, Friends or Groups \r\n        setRadioValue(e)\r\n\r\n           if (e === '3') {\r\n            setDisplayGrpBtn(true)\r\n        } else {\r\n            setDisplayGrpBtn(false)\r\n        }\r\n     }\r\n\r\n     // output appropriate date format in dd/mm/yy and hh:mm\r\n     function handleDate(date) {\r\n        if (date !== null) {\r\n            var split1 = date.toDate().toString().split(' ')\r\n            var day = split1[2] + \"-\" + split1[1] + '-' + split1[3] +'\\n'\r\n            var time = split1[4].substring(0, 5)\r\n            return day + time\r\n        } else {\r\n            return '...'\r\n        }\r\n     }\r\n\r\n     // shortern text display in a box if too long\r\n     function shortenText(text, limit) {\r\n         if (text.length > limit) {\r\n             return text.substring(0, limit) + '...'\r\n         } \r\n         return text\r\n     }\r\n\r\n    return(\r\n        <div> \r\n        <div style={{textAlign:'center', backgroundColor:'#e0e0e0'}}>\r\n           \r\n        </div>\r\n        <ButtonGroup toggle style={{width:'100%'}}>\r\n            {radios.map((radio, idx) => (\r\n                <ToggleButton\r\n                key={idx}\r\n                type=\"radio\"\r\n                variant=\"secondary\"\r\n                name=\"radio\"\r\n                value={radio.value}\r\n                checked={radioValue === radio.value}\r\n                onChange={(e) => handleGroupButton(e.target.value)}\r\n                >\r\n                {radio.name}\r\n                </ToggleButton>\r\n            ))}\r\n        </ButtonGroup>\r\n        {displayGrpBtn && <Button onClick={() => setVisibleDrawer(true)} variant='outline-secondary' style={{'width':'100%', 'border':'0px'}}> \r\n        + New Group </Button>}\r\n        <Drawer visible={visibleDrawer} placement='left' title='New Group'\r\n        width={'450px'} onClose={() => setVisibleDrawer(false)}>\r\n                <AddGroupList setVisibleDrawer={setVisibleDrawer} setNewGrpIDs={setNewGrpIDs} newGrpIDs={newGrpIDs}></AddGroupList>\r\n        </Drawer>\r\n        <div style={{overflowY:'auto', maxHeight:'82vh'}}>\r\n            {   \r\n                chatInfo\r\n                .filter(person => {\r\n                    if (radioValue === '1') {\r\n                        return person\r\n                    }else if (radioValue === '2' && friendEmails.includes(person.rid)) {\r\n                        return person\r\n                    }   else if(radioValue === '3') {\r\n                        return person\r\n                    }\r\n                    return false\r\n                })\r\n                .map(person => (\r\n                    <Button variant='primary'\r\n                    onClick={() => handleChat(person.rid)}\r\n                    key={person.createdAt}\r\n                    style={{display:'flex', width:'100%', backgroundColor:'transparent', borderColor:'#fafafa', borderWidth:'0.01px', color:'black'}}>\r\n                        <div style={{float:'left',  margin:'2%'}}>\r\n                           {radioValue === '3' ? <Avatar size={60} icon={<TeamOutlined/>}></Avatar>  \r\n                                            : <Avatar size={60} src={person.image} icon={<UserOutlined/>}></Avatar>}\r\n                        </div>\r\n                        <div style={{margin:'2%', width:'60%'}}>\r\n                            <div style={{float:'left', textAlign:'left'}}>\r\n                                <h5>{person.name}</h5>\r\n                                {shortenText(person.text, 22)}\r\n                            </div>\r\n                        </div>\r\n                        <div style={{float:'left', margin:'2%', width:'40%'}}>\r\n                            <div style={{float:'right', textAlign:'right'}}>\r\n                                <p>{handleDate(person.createdAt)}</p>\r\n                            </div>\r\n                        </div>\r\n                    </Button>))\r\n            }\r\n        </div>        \r\n        </div>\r\n    )\r\n\r\n}\r\nexport default ChatHistory\r\n","import React, {useState} from 'react'\r\nimport { ListGroup, Button } from 'react-bootstrap'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { Avatar, Drawer, Popconfirm } from 'antd'\r\nimport db from \"../../firebase.js\"\r\nimport { useAuth } from '../../context/AuthContext'\r\n\r\nconst GroupChatInfo = ({chatMember, setChatMember, groupName, chatID}) => {\r\n    const { currentUser } = useAuth()\r\n    const [visibleAddMember, setVisibleAddMember] = useState(false)\r\n\r\n    //display exit group button\r\n    const [disableBtn, setDisableBtn] = useState(false)\r\n\r\n    //data to add new members\r\n    const [addedFriends, setAddedFriends] = useState([])\r\n    const [remainingFriends, setRemainingFriends] = useState([])\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n    \r\n\r\n    const showAddDrawer = async () => {\r\n        // pull friend's data \r\n        var friendList = []\r\n        await db.collection(\"users\")\r\n        .where(\"email\",\"==\", currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                friendList = doc.data().friendList\r\n            })\r\n        })\r\n\r\n        //convert to emails\r\n        const chatMemberEmails = chatMember.map(mem => (mem.email))\r\n\r\n        //reset\r\n        setRemainingFriends([])\r\n        setAddedFriends([])\r\n\r\n        // fetch all the data in the friend list \r\n        await db.collection(\"users\")\r\n        .where(\"email\",\"!=\", currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                // append data into array if it is in the friend list\r\n                \r\n                if (friendList.includes(doc.data().email) && !chatMemberEmails.includes(doc.data().email)) {\r\n\r\n                    setRemainingFriends(remainingFriends => [...remainingFriends, doc.data()])\r\n                }\r\n            })\r\n        })\r\n        .then(() => console.log(\"successfully read all in friendlist\"))\r\n        .catch((error) => console.log(\"Error in reading friendlist:\", error))\r\n\r\n        setVisibleAddMember(true)\r\n    }\r\n\r\n    const handleAdd = (email) => {\r\n        const selected = remainingFriends.find(per => {\r\n            return per.email === email ? per : false\r\n         })\r\n\r\n          // add selected to addedfriend\r\n          addedFriends.push(selected)\r\n          setAddedFriends(addedFriends)\r\n\r\n         // remove from friends\r\n         setRemainingFriends(remainingFriends.filter(f => {\r\n             return f.email === email ? false : f\r\n         }))\r\n    }\r\n\r\n    const handleAdded = (email) => {\r\n        const selected = addedFriends.find(per => {\r\n            return per.email === email ? per: false\r\n         })\r\n\r\n         // remove from addedfriends\r\n         setAddedFriends(addedFriends.filter(f => {\r\n            return f.email === email ? false : f\r\n        }))\r\n\r\n        // add friend to friends\r\n        setRemainingFriends(remainingFriends => [...remainingFriends, selected])\r\n    }\r\n\r\n    // leave groupchat\r\n    const handleLeave = async() => {\r\n        setDisableBtn(true)\r\n\r\n        var chatList = []\r\n        await db.collection(\"users\")\r\n        .where(\"email\",\"==\", currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                chatList = doc.data().chatList\r\n            })\r\n        })\r\n\r\n        chatList = chatList.filter(chat => chat !== chatID)\r\n\r\n        // update new chatList\r\n        await db.collection(\"users\")\r\n        .doc(currentUser.email)\r\n        .update({chatList: chatList})\r\n        .then(\"successfully leave the group\")\r\n\r\n\r\n        setDisableBtn(false)\r\n        window.location.reload()\r\n    }\r\n\r\n    //add member to database\r\n    const handleAddMemberDB = async () => { \r\n        setDisableBtn(true)\r\n        \r\n        var chatList = []\r\n        for (const friend of addedFriends){\r\n\r\n            // fetch chatlist from friend\r\n            \r\n            await db.collection(\"users\")\r\n            .where(\"email\",\"==\", friend.email)\r\n            .get()\r\n            .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                    chatList = doc.data().chatList\r\n                })\r\n            })\r\n\r\n            //update chatList\r\n            chatList = [...chatList, chatID]\r\n\r\n            await db.collection(\"users\")\r\n            .doc(friend.email)\r\n            .update({chatList: chatList})\r\n            .then(\"successfully added \" + friend.firstName + \" to group\")\r\n        }\r\n\r\n        for (const friend of addedFriends) {\r\n            setChatMember(chatMember => [...chatMember, friend])\r\n        }\r\n\r\n        setDisableBtn(false)\r\n        setVisibleAddMember(false)\r\n    }\r\n\r\n\r\n    function displayNumMembers(n) {\r\n        return n === 0 ? '' \r\n                    : n > 1 ? n + ' members'\r\n                            : n + ' member'  \r\n    }\r\n\r\n    return(<div>\r\n        <div>\r\n            <h5>{displayNumMembers(chatMember.length)}</h5>\r\n            <hr/>\r\n            <Button onClick={showAddDrawer} type='submit' variant='outline-primary' style={{borderRadius:'30px', width:'100%'}}>\r\n                Add Members \r\n            </Button>\r\n            <ListGroup variant='flush'>\r\n                {\r\n                    chatMember.map(member => (\r\n                        <ListGroup.Item style={{border:'0px'}} key={member.firstName + member.lastName + member.firstName}>\r\n                            <div style={{width:'100%', backgroundColor:'transparent', borderWidth:'0px'}}>\r\n                                    <div style={{float:'left', marginRight:'5%'}}>\r\n                                        <Avatar size={45} src={member.image} icon={<UserOutlined/>}></Avatar>\r\n                                    </div>\r\n                                    <div style={{textAlign:'left', paddingTop:'3%'}}>\r\n                                        <h6>{member.firstName + \" \" + member.lastName}</h6>\r\n                                    </div>\r\n                            </div>\r\n                        </ListGroup.Item> \r\n                    ))\r\n                }\r\n            </ListGroup>\r\n            <Popconfirm title='Are you sure?' disabled={disableBtn} onConfirm={handleLeave}>\r\n                <Button  variant='secondary' style={{borderRadius:'30px', marginTop:'10%', width:'100%'}}>\r\n                        Exit group\r\n                </Button>\r\n            </Popconfirm>\r\n        </div>\r\n        <Drawer visible={visibleAddMember} placement='left' title={groupName}\r\n                    width={'450px'} onClose={() => setVisibleAddMember(false)}>\r\n            {addedFriends.length !== 0 && <Button style={{width:'100%', border:'0px', borderRadius:'10px', marginBottom:'5%'}} \r\n                    variant='secondary' onClick={handleAddMemberDB} disabled={disableBtn}> \r\n                confirm\r\n            </Button>}\r\n            {\r\n                addedFriends.map(added => (\r\n                     <Button variant='outline-secondary' style={{borderRadius:'20px', height:'40px'}} \r\n                        key={added.phone + added.lastName + added.phone} onClick={() => handleAdded(added.email)}>\r\n                            <p>{added.firstName + \" \" + added.lastName} <b> x</b></p>\r\n                    </Button>\r\n                ))\r\n            }\r\n            <input type='text' placeholder='Type friend name' style={{borderWidth:'0px', width:'100%'}}\r\n                onChange={e => {setSearchTerm(e.target.value)}}\r\n            ></input>\r\n            {\r\n                remainingFriends.filter((val) => {\r\n                    if (searchTerm === \"\") {\r\n                        return val\r\n                    } else if (val.firstName.toLowerCase().includes(searchTerm.toLocaleLowerCase())\r\n                        || val.lastName.toLowerCase().includes(searchTerm.toLowerCase())\r\n                    ) {\r\n                        return val\r\n                    } \r\n                    return false\r\n                }).map(friend => (\r\n                    <Button variant='outline-secondary' style={{width:'100%', backgroundColor:'transparent', borderWidth:'0px'}}\r\n                        key={friend.major + friend.lastName + friend.email} onClick={() => handleAdd(friend.email)}>\r\n                            <div style={{float:'left', marginRight:'5%'}}>\r\n                                <Avatar size={45} src={friend.image} icon={<UserOutlined/>}></Avatar>\r\n                            </div>\r\n                            <div style={{textAlign:'left', marginTop:'3.2%'}}>\r\n                                <h6>{friend.firstName + \" \" + friend.lastName}</h6>\r\n                            </div>\r\n                    </Button>\r\n                ))\r\n            }\r\n        </Drawer>\r\n        </div>)\r\n\r\n}\r\n\r\nexport default GroupChatInfo","\r\nimport React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { SendOutlined } from '@ant-design/icons'\r\nimport { Drawer } from 'antd'\r\n\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport db from \"../../firebase.js\"\r\nimport firebase from 'firebase/app';\r\n\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nimport GroupChatInfo from './GroupChatInfo'\r\nimport '../../style/css/chat.css'\r\n\r\n\r\nexport default function Groupchat({ID}){\r\n    // const chatID = ID.location.state\r\n    const chatID = ID;\r\n    const [first, setFirst] = useState(\" \")\r\n    const messagesRef = db.collection(\"chats\").doc(\"all\").collection(chatID)\r\n\r\n    // displaying group info \r\n    const [chatMember, setChatMember] = useState([])\r\n    const [visibleDrawer, setVisibleDrawer] = useState(false)\r\n    const [userName, setUserName] = useState('')\r\n    \r\n    const { currentUser } = useAuth()\r\n\r\n     messagesRef.where('uid', '==', 'System').get().then((querySnapshot) => {\r\n      querySnapshot.forEach((doc) => {setFirst(doc.data())})\r\n    })\r\n \r\n    const query = messagesRef.orderBy('createdAt').limit(25);\r\n\r\n    \r\n    const [formValue, setFormValue] = useState('');\r\n            \r\n            const [messages] = useCollectionData(query, { idField: 'id' });\r\n\r\n\r\n            const sendMessage = async (e) => {\r\n                e.preventDefault();\r\n                \r\n                const value = formValue\r\n                setFormValue('')\r\n\r\n                await messagesRef.add({\r\n                  text: value,\r\n                  createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                  time: moment().format('HH:mm'),\r\n                  uid: currentUser.email,\r\n                  chatName: first.chatName,\r\n                  userList: first.userList,\r\n\r\n                })\r\n              }\r\n\r\n              // fetch all the members in the group chat\r\n              useEffect(() => {\r\n                setChatMember([])\r\n                const fetchData = async () => {\r\n                  await  db.collection('users') \r\n                  .where('email', '!=', currentUser.email) \r\n                  .get() \r\n                  .then(snap => { \r\n                   snap.docs.forEach(doc => { \r\n                    const per = doc.data()\r\n                    \r\n                    // if in the same group append to array\r\n                    if (per.chatList.includes(chatID)) {\r\n                      setChatMember(chatMember => [...chatMember, per])\r\n                    }\r\n\r\n                      }) \r\n                  }) \r\n                }\r\n\r\n                const fetchName = async() => {\r\n                  await  db.collection('users') \r\n                  .where('email', '==', currentUser.email) \r\n                  .get() \r\n                  .then(snap => { \r\n                   snap.docs.forEach(doc => { \r\n                      setUserName(doc.data().firstName)\r\n                   })\r\n                  })\r\n\r\n                }\r\n\r\n                fetchData()\r\n                fetchName()\r\n      \r\n              }, [chatID, currentUser.email])\r\n\r\n              const onHeaderClick = () => {\r\n                setVisibleDrawer(true)\r\n              }\r\n\r\n\r\n              function concatMembersName(members) {\r\n                return members.map(mem => (mem.firstName)).join(', ')\r\n              }\r\n\r\n              function shortenText(text, limit) {\r\n                if (text.length > limit) {\r\n                    return text.substring(0, limit) + '...'\r\n                } \r\n                return text\r\n              }\r\n\r\n           \r\n             \r\n              return (\r\n                <div style={{border:'solid', borderWidth:'0.2px', borderColor:'#d9d9d9', height:'100%'}}>\r\n                   <div style={{display:'flex', borderWidth:'0.02px', border:'solid', borderColor:'#e3e3e3', backgroundColor:'#fbfbfb'}}>\r\n                     <div style={{width:'100%'}}> \r\n                        <Button variant='outline-secondary' style={{borderWidth:'0px',width:'100%', backgroundColor:'transparent'}}\r\n                          onClick={onHeaderClick}>\r\n                          <h4>{first.chatName}</h4>\r\n                          {shortenText(concatMembersName(chatMember), 30)}\r\n                        </Button>\r\n                     </div>\r\n                   </div>\r\n                <div style={{height:'80vh', position:'relative', textAlign:'center'}}>\r\n                  <main style={{overflowY:'auto', maxHeight:'77vh', flexDirection: \"column\"}}>\r\n                    {messages && messages.map(msg => <ChatMessage key={msg.id} id = {msg.id} message={msg} userName={userName} chatMember={chatMember}/>)}\r\n                  </main>\r\n                    <form onSubmit={sendMessage} style={{position:'absolute', bottom:'0px', display:'flex', width:'100%', paddingTop:'0px'}}>\r\n                      <input type='text' style={{borderWidth:'0.5px', borderRadius:'20px', marginLeft:'1%',\r\n                      width:'92%', float:'left'}} value={formValue} \r\n                      onChange={(e) => setFormValue(e.target.value)} placeholder=\"  say something nice\" />\r\n                      <button type=\"submit\" style={{borderWidth:'0px', float:'right', marginBottom:'8px'}} disabled={!formValue}>\r\n                      <SendOutlined size={24}/>\r\n                      </button>\r\n                    </form>\r\n                  </div>\r\n                  <Drawer visible={visibleDrawer} placement='left' title={first.chatName}\r\n                    width={'450px'} onClose={() => setVisibleDrawer(false)}>\r\n                    <GroupChatInfo chatMember={chatMember} setChatMember={setChatMember} groupName={first.chatName}  chatID={chatID}/>  \r\n                  </Drawer>\r\n              </div>)\r\n          }\r\n       \r\n            \r\n            function ChatMessage(props) {\r\n              const {time, text, uid} = props.message;\r\n              const userName = props.userName\r\n              const chatMember = props.chatMember\r\n\r\n              const { currentUser } = useAuth()\r\n              \r\n              const messageClass = uid === currentUser.email ? 'sent' : 'received';\r\n\r\n              const selected = chatMember.find(per => {\r\n                return per.email === uid ? per: false\r\n              })\r\n\r\n              const name = uid === currentUser.email ? userName \r\n                                                    : selected ?\r\n                                                      selected.firstName\r\n                                                      : uid\r\n            \r\n              return (<div>\r\n               <div className={`message ${messageClass}`}>\r\n                  <p  name=\"p-message\">\r\n                    {name + \":\"} {text } \r\n                    <span style={{fontSize:'10px', fontFamily:'Courier New'}}> {time}\r\n                    </span></p>\r\n                </div>\r\n              </div>)\r\n            }\r\n  \r\n            ","import React, {useState, useEffect} from 'react'\r\nimport NavBar from '../components/Layout/NavBar'\r\nimport FriendList from '../components/Layout/FriendList'\r\nimport \"../style/css/dashboard.css\"\r\nimport { Accordion, Card } from 'react-bootstrap'\r\nimport { CommentOutlined } from '@ant-design/icons'\r\nimport ChatRoom from '../components/user/chat2'\r\nimport db from '../firebase.js'\r\nimport { useAuth } from '../context/AuthContext'\r\nimport ChatHistory from '../components/Layout/ChatHistory'\r\nimport Groupchat from '../components/user/groupchat'\r\n\r\n\r\n/**\r\n * This component handles the main page after the user\r\n * successfully login\r\n */\r\n\r\nexport default function Dashboard() {\r\n    const [chatData, setChatData] = useState(\"\")\r\n    \r\n    // for friend list \r\n    const [friends, setFriends] = useState([])\r\n    const { currentUser } = useAuth()\r\n\r\n    // for chat list \r\n    const  [chatHist, setChatHist ] = useState([])\r\n    const [friendEmails, setFriendEmails] = useState([])\r\n    const [isFriend, setIsFriend] = useState(false)\r\n\r\n    // for thomas group chat\r\n    const [groupList, setGroupList] = useState(' ')\r\n    const [grpChatID, setGrpChatID] = useState('')\r\n    \r\n\r\n    useEffect(() => {\r\n        var frenList = []\r\n        var chatList = []\r\n        var gchatList = []\r\n\r\n        const fetchUserData = async () =>{\r\n            // fetch user friend list\r\n            //fetch user chat list\r\n            await db.collection(\"users\")\r\n            .where(\"email\",\"==\", currentUser.email)\r\n            .get()\r\n            .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                    frenList = doc.data().friendList\r\n                    chatList = doc.data().chatList\r\n                    \r\n                })\r\n            })\r\n            for (let i = 0 ; i< chatList.length; i ++){\r\n                if(chatList[i].includes(\"GROUP\")){\r\n                    gchatList.push(chatList[i])\r\n                }\r\n\r\n            }\r\n            setGroupList(gchatList)\r\n            setFriendEmails(frenList)\r\n\r\n            // fetch all the data in the friend list \r\n            await db.collection(\"users\")\r\n            .where(\"email\",\"!=\", currentUser.email)\r\n            .get()\r\n            .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                    // append data into array if it is in the friend list\r\n                    if (frenList.includes(doc.data().email)) {\r\n                        setFriends(friends => [...friends, doc.data()])\r\n                    }\r\n                })\r\n            })\r\n            .then(() => console.log(\"successfully read all in friendlist\"))\r\n            .catch((error) => console.log(\"Error in reading friendlist:\", error))\r\n        }\r\n        \r\n\r\n        const fetchChatList = async () =>{ \r\n                      //fetch all data from chat List\r\n                      await db.collection(\"users\")\r\n                      .where(\"email\",\"!=\", currentUser.email)\r\n                      .get()\r\n                      .then(snap => {\r\n                          snap.docs.forEach(doc => {\r\n                              // append data into array if it is in the friend list\r\n                              if (chatList.includes(doc.data().email)) {\r\n                                  setChatHist(chatHist => [...chatHist, doc.data()])\r\n                              }\r\n                          })\r\n                      })\r\n                      .then(() => console.log(\"successfully read all in chatlist\"))\r\n                      .catch((error) => console.log(\"Error in reading chatlist:\", error))\r\n                }\r\n\r\n        \r\n        if (friends.length === 0) {\r\n            fetchUserData()\r\n        }\r\n   \r\n        fetchChatList()   \r\n        \r\n    }, [currentUser.email, friends.length])\r\n \r\n\r\n         \r\n    return (\r\n        <div>\r\n            <NavBar setFriends={setFriends}/>\r\n            <div className=\"body\">\r\n                <div className=\"leftpane\">\r\n                    {chatHist !== [] ? <ChatHistory chatHist={chatHist}\r\n                    setChatData={setChatData}\r\n                    friendEmails={friendEmails}\r\n                    groupList = {groupList}\r\n                    setIsFriend={setIsFriend}\r\n                    setGrpChatID={setGrpChatID}\r\n                    ></ChatHistory> : false}\r\n                    \r\n                </div>\r\n                <div className=\"middlepane\">\r\n                    {!grpChatID && !chatData && <div  style={{textAlign:'center', paddingTop:'25%'}}>\r\n                       <CommentOutlined style={{fontSize:'100px', color:'#106cfc'}}/>\r\n                       <p>chat</p>\r\n                    </div>}\r\n                    \r\n                    {chatData ? <ChatRoom  friendData={chatData} isFriend={isFriend}></ChatRoom> : false}\r\n                    {grpChatID && <Groupchat ID={grpChatID}></Groupchat>}\r\n                </div>\r\n                <div className=\"rightpane\">\r\n                    <Accordion defaultActiveKey='0'>\r\n                        <Card>\r\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                                Friends\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                               {friends && <FriendList setChatData={setChatData}\r\n                                friends={friends}\r\n                                setFriends={setFriends}/>}\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","var userEntry ={\r\n    email: \" \", firstName: \" \", lastName:\" \", gender: \" \", phone: \" \", bio:\" \"\r\n    }\r\nexport default userEntry;\r\n","import React, { useRef, useState } from 'react'\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport { Link } from 'react-router-dom'\r\nimport db from \"../../firebase.js\"\r\nimport userEntry from './user'\r\n\r\n/**\r\n * This component handles the Sign Up page\r\n */\r\n\r\nexport default function Signup() {\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const passwordConfirmRef = useRef()\r\n    const { signup } = useAuth()\r\n    const [error, setError] = useState('')\r\n    const [email, setEmail] = useState(\"\")\r\n    const [message, setMessage] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const [firstName, setFirstName] = useState(\"\")\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [gender, setGender] = useState(\"Male\")\r\n    const [handphone_Number, setNumber] = useState(\"+65\")\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n        userEntry.firstName = firstName\r\n        userEntry.lastName = lastName\r\n        userEntry.email = email\r\n        userEntry.gender = gender\r\n        userEntry.phone = handphone_Number\r\n        userEntry.bio = \"\"\r\n        userEntry.interest = \"\"\r\n        userEntry.major = \"\"\r\n        userEntry.image = \"\"\r\n        userEntry.friendRequest = []\r\n        userEntry.friendList = []\r\n        userEntry.chatList = []\r\n\r\n        if (passwordRef.current.value !== \r\n            passwordConfirmRef.current.value) {\r\n                return setError('Password do not match!')\r\n            }\r\n\r\n            await db.collection('users').doc(email).set(userEntry)\r\n            .then(() => console.log(\"profile successfully added into database\"))\r\n            .catch((e) => console.error(\"Error writing document\", e))\r\n            //firestoreHelper.createNewDocument(db, 'users',userEntry )\r\n\r\n        try {\r\n            setError('')\r\n            setMessage('')\r\n            setLoading(true)\r\n            await signup(emailRef.current.value, passwordRef.current.value)\r\n            setMessage('Sign up successful! Please log in.')\r\n        } catch (error){\r\n            setError(error.message)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <Card>\r\n            <Card.Body>\r\n                <h2 className=\"text-center mb-4\">Sign Up</h2>\r\n                {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                {message && <Alert variant=\"success\">{message}</Alert>}\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group id=\"email\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control  type=\"email\" ref={emailRef} onChange={e=>setEmail(e.target.value)} required/>\r\n                    </Form.Group>\r\n                    <Form.Group id=\"password\">\r\n                         <Form.Label>Password</Form.Label>\r\n                         <Form.Control type=\"password\" ref={passwordRef} required/>\r\n                     </Form.Group>\r\n                     <Form.Group id=\"password-confirm\">\r\n                        <Form.Label>Password Confirmation</Form.Label>\r\n                        <Form.Control type=\"password\" ref={passwordConfirmRef} required/>\r\n                     </Form.Group>\r\n                     <Form.Group id=\"firstname\">\r\n                        <Form.Label>First Name</Form.Label>\r\n                        <Form.Control type=\"firstName\" onChange={e => setFirstName(e.target.value)}  required/>\r\n                     </Form.Group>\r\n                     <Form.Group id=\"lastname\">\r\n                        <Form.Label>Last Name</Form.Label>\r\n                        <Form.Control type=\"lastName\" onChange={e => setLastName(e.target.value)}  required/>\r\n                     </Form.Group>\r\n                     <Form.Group id= \"Gender\"> \r\n                     <Form.Label>Gender </Form.Label>\r\n                     <select>\r\n                        <option value= \"male\" onClick={e => setGender(e.target.value)}>Male</option>\r\n                        <option value= \"female\" onClick={e => setGender(e.target.value)}>Female</option>\r\n                    </select>\r\n                    </Form.Group>\r\n                     <Form.Group id=\"number\">\r\n                        <Form.Label>Handphone Number</Form.Label>\r\n                        <Form.Control type=\"8 digit number\" onChange={e => setNumber(e.target.value)}  required/>\r\n                     </Form.Group>\r\n\r\n                     <Button disabled={loading} className=\"w-100 mt-2\" type = \"submit\" >\r\n                        Sign Up\r\n                     </Button> \r\n                </Form>\r\n            </Card.Body>\r\n        </Card>\r\n        <div className=\"w-100 text-center mt-2\">\r\n            Already have an account? <Link to=\"/login\">Log In</Link>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport Signup from '../components/user/Signup'\r\nimport { Container } from \"react-bootstrap\"\r\nimport \"../style/css/App.css\"\r\n\r\nexport default function SignupPage() {\r\n    return (\r\n        <Container className=\"container\">\r\n            <div className=\"box\">\r\n                <Signup></Signup>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","import React, { useRef, useState } from 'react'\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\n/**\r\n * This component handles the login page.\r\n */\r\nexport default function Login() {\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const { login } = useAuth()\r\n    const [error, setError] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            setError('')\r\n            setLoading(true)\r\n            await login(emailRef.current.value, passwordRef.current.value)\r\n            history.push(\"/\")\r\n        } catch (error) {\r\n            setError(error.message)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <Card>\r\n            <Card.Body>\r\n                <h2 className=\"text-center mb-4\">Log In</h2>\r\n                {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group id=\"email\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"email\" ref={emailRef} required/>\r\n                    </Form.Group>\r\n                    <Form.Group id=\"password\">\r\n                         <Form.Label>Password</Form.Label>\r\n                         <Form.Control type=\"password\" ref={passwordRef} required/>\r\n                     </Form.Group>\r\n                     <Button disabled={loading} className=\"w-100\" type = \"submit\">Log In</Button>\r\n                </Form>\r\n                <div className=\"w-100 text-center mt-3\">\r\n                    <Link to=\"/forgot-password\">Forgot Password?</Link>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n        <div className=\"w-100 text-center mt-2\">\r\n            Need an account? <Link to=\"/signup\">Sign Up</Link>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport Login from '../components/user/Login'\r\nimport { Container } from \"react-bootstrap\"\r\nimport \"../style/css/App.css\"\r\n\r\nexport default function LoginPage() {\r\n    return (\r\n        <Container className=\"container\">\r\n            <div className=\"box\">\r\n                <Login></Login>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","import React, { useRef, useState } from \"react\"\r\nimport { Form, Button, Card, Alert } from \"react-bootstrap\"\r\nimport { useAuth } from \"../../context/AuthContext\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\n/**\r\n * This component handles the forgot password page.\r\n */\r\n\r\nexport default function ForgotPassword() {\r\n  const emailRef = useRef()\r\n  const { resetPassword } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [message, setMessage] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      setMessage(\"\")\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await resetPassword(emailRef.current.value)\r\n      setMessage(\"Check your inbox for further instructions\")\r\n    } catch (error) {\r\n      setError(error.message)\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">Password Reset</h2>\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n          {message && <Alert variant=\"success\">{message}</Alert>}\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group id=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control type=\"email\" ref={emailRef} required />\r\n            </Form.Group>\r\n            <Button disabled={loading} className=\"w-100 mt-2\" type=\"submit\">\r\n              Reset Password\r\n            </Button>\r\n          </Form>\r\n          <div className=\"w-100 text-center mt-3\">\r\n            <Link to=\"/login\">Login</Link>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        Need an account? <Link to=\"/signup\">Sign Up</Link>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react'\r\nimport ForgotPassword from '../components/user/ForgotPassword'\r\nimport { Container } from \"react-bootstrap\"\r\nimport \"../style/css/App.css\"\r\n\r\nexport default function ForgetPasswordPage() {\r\n    return (\r\n        <Container className=\"container\">\r\n            <div className=\"box\">\r\n                <ForgotPassword></ForgotPassword>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport { Avatar, Modal } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport db, { app } from '../../firebase.js'\r\nimport { PacmanLoader} from 'react-spinners'\r\n\r\n\r\nexport default function DisplayPhoto() {\r\n    const { currentUser } = useAuth()\r\n    const [visible, setVisible] = useState(false)\r\n    const [profileImg, setProfileImg] = useState(\"\")\r\n    const [modalImg, setModalImg] = useState(profileImg)\r\n    const [uploadImg, setUploadImg] = useState(null)\r\n    const [loadingBar, setLoadingBar] = useState(false)\r\n    \r\n    \r\n    const handleImgChange= (img) => {\r\n        if (img.target.files[0]){ \r\n            setModalImg(URL.createObjectURL(img.target.files[0]))\r\n            setUploadImg(img.target.files[0])\r\n        }\r\n    }\r\n\r\n    const showModal = () => {\r\n        setModalImg(profileImg)\r\n        setVisible(true)\r\n    }\r\n\r\n    const handleOk = async (e) => {\r\n        setLoadingBar(true)\r\n\r\n        if (uploadImg){\r\n            const storageRef = app.storage().ref()\r\n            const fileRef = storageRef.child(\"display_images/\" + uploadImg.name)\r\n            await fileRef.put(uploadImg).then(() => console.log(\"image successfully written into storage/display_images/\" + uploadImg.name))\r\n            const fileUrl = await fileRef.getDownloadURL()\r\n            setProfileImg(fileUrl)\r\n            await db.collection(\"users\").doc(currentUser.email).update({\"image\": fileUrl})\r\n            .then(() => console.log(\"successfully updated image into datebase: \", fileUrl))\r\n            .catch((error) => console.log(\"Error in writting image :\", error))\r\n            \r\n        }\r\n\r\n        setLoadingBar(false)\r\n        setVisible(false)\r\n    }\r\n\r\n    // fetch profile image\r\n    useEffect(() => {\r\n        const fetchDP = async () =>{\r\n            await db.collection(\"users\")\r\n            .where(\"email\",\"==\", currentUser.email)\r\n            .get()\r\n            .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                    setProfileImg(doc.data().image)\r\n                    console.log(\"dp successfully fetched from firestore.\")\r\n                })\r\n            })\r\n        }\r\n        fetchDP()\r\n    }, [profileImg, currentUser.email])\r\n\r\n    const handleCancel = e => { \r\n        setUploadImg(null)\r\n        setModalImg(profileImg)\r\n        setVisible(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"dp\" style={{display:\"flex\", justifyContent:\"center\"}}>\r\n            <button style={{border: 0, backgroundColor: 'transparent'}} onClick={showModal}> \r\n                <Avatar size={100} icon={<UserOutlined/>} src={profileImg} alt=\"\"/> \r\n            </button>\r\n            <Modal title=\"Display Photo\" \r\n            visible={visible}\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n            >\r\n            <img src={modalImg} style={{maxWidth:\"100%\", maxHeight:\"50%\"}} alt=\"\"></img>\r\n            {!loadingBar && <input type=\"file\" onChange={handleImgChange}></input>}\r\n            <div style={{paddingTop:\"10px\"}}>\r\n                <PacmanLoader loading={loadingBar} color=\"#307fff\"></PacmanLoader>\r\n            </div>\r\n           </Modal>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport { Link} from 'react-router-dom'\r\nimport DisplayPhoto from '../Layout/DisplayPhoto'\r\nimport db from \"../../firebase.js\"\r\n\r\n/**\r\n * This component handles the profile page\r\n */\r\nexport default function Profile() {\r\n    const { currentUser } = useAuth()\r\n    const [userData, setUserData] = useState(\"\")\r\n\r\n    // fetch data\r\n    useEffect(() => {\r\n        const fetchData = async () =>{\r\n            await db.collection(\"users\")\r\n            .where(\"email\",\"==\", currentUser.email)\r\n            .get()\r\n            .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                    setUserData(doc.data())\r\n                    console.log(\"profile data successfully fetched from firestore.\")\r\n                })\r\n            })\r\n        }\r\n        fetchData()\r\n    }, [currentUser.email])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card>\r\n                <div style={{display:\"flex\"}}>\r\n                    <DisplayPhoto></DisplayPhoto>\r\n                    <div style={{marginTop:\"auto\", marginBottom:\"auto\", paddingLeft:\"5%\"}}>\r\n                        <p style={{display:\"block\"}}><strong>{userData && (userData.firstName + \" \" + userData.lastName)} </strong></p>\r\n                        <p>{userData.major}</p>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <div style={{display:\"flex\", justifyContent:\"space-between\", width:\"80%\"}}>\r\n                </div>\r\n                <h6>Bio: </h6><p>{userData.bio}</p>\r\n                <h6>Interests:</h6><p>{userData.interest} </p>\r\n                <p><strong>Email: </strong> {currentUser.email} </p>\r\n                <Link to=\"/update-profile\" className=\"btn btn-primary w-100 mt-3\">Edit Profile</Link>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport Profile from '../components/user/Profile'\r\nimport NavBar from '../components/Layout/NavBar'\r\nimport \"../style/css/App.css\"\r\n\r\nexport default function ProfilePage() {\r\n    return (\r\n        <React.Fragment>\r\n        <NavBar></NavBar>\r\n        <div className=\"box\">\r\n             <Profile></Profile>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}","import React, {useState} from \"react\"\r\nimport { Card } from 'react-bootstrap'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Avatar, Modal } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\n\r\nexport default function MatchProfile({ userData }) {\r\n    const [visible, setVisible] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const showModal = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const handleCancel = (e) => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const handleOk = (e) => {\r\n        history.push({\r\n            pathname:'/chat',\r\n            state: userData\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <Card style={{marginTop:'2%', marginBottom:'2%', marginLeft:'auto', marginRight:'auto',\r\n            borderRadius:'15px', width:\"85%\", alignItems:'middle'}} \r\n            border=\"secondary\" \r\n            onClick={showModal}>\r\n            <div style={{display:'flex'}}>\r\n                <div style={{width:\"20%\", float:\"left\", padding:\"2%\", alignItems:\"center\", justifyContent:\"center\"}}>\r\n                    <Avatar size={80} src={userData.image} icon={<UserOutlined/>}></Avatar>\r\n                </div>\r\n                <div style={{width:\"70%\", float:\"left\", padding:\"1%\", marginLeft:'2%', textAlign:'left'}}>\r\n                    <p style={{verticalAlign:'middle'}}><strong>{userData.firstName + \" \" + userData.lastName}</strong>\r\n                        <br/>\r\n                        <span style={{display:'inline-block', marginTop:'10px'}}>Major: {userData.major}</span>\r\n                        <br/>\r\n                        <span>Interests: {userData.interest}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n        <Modal visible={visible}\r\n        okText=\"Chat\"\r\n        onCancel={handleCancel}\r\n        onOk={ handleOk /*<Link to={{pathname: \"/chat\", state: userData}}>Chat</Link>*/}\r\n        >\r\n            <Card style={{borderRadius:'10px', display:'flex'}} border=\"dark\">\r\n                <div>\r\n                    <div style={{float:'left', padding:'2%'}}>\r\n                        <Avatar size={100} src={userData.image} icon={<UserOutlined/>}></Avatar>\r\n                    </div>       \r\n                    <div style={{padding:\"2%\", marginTop:'4%'}}>\r\n                        <p style={{display:\"block\"}}><strong>{userData.firstName + \" \" + userData.lastName}</strong></p>\r\n                        <p>{userData.major}</p>\r\n                    </div>\r\n                </div>\r\n                \r\n                <hr/>\r\n                <div style={{margin:'2%'}}>\r\n                    <h6>Bio: </h6><p>{userData.bio}</p>\r\n                    <h6>Interests: </h6><p> {userData.interest} </p>\r\n                    <p><strong>Email: </strong>{userData.email}</p>\r\n                </div>\r\n            </Card>\r\n         {/* <Link to={{pathname: \"/chat\", state: userData}}>Chat</Link> */}\r\n        </Modal>\r\n        </React.Fragment>\r\n        \r\n        )\r\n\r\n}","export default __webpack_public_path__ + \"static/media/iconfinder-256.e68cda01.png\";","import React, {useState} from 'react'\r\nimport MatchProfile from './MatchProfile'\r\nimport db from '../../firebase.js'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport { PuffLoader} from 'react-spinners'\r\nimport Image from '../../iconfinder-256.png'\r\nimport { Alert } from \"react-bootstrap\"\r\n\r\nexport default function Match() {\r\n    const [matches, setMatches] = useState([])\r\n    const { currentUser } = useAuth()\r\n    const [userInterest, setUserInterest] = useState([])\r\n    const [loader, setLoader] = useState(false)\r\n    const [friends, setFriends] = useState([])\r\n    const [displayMessage, setDisplayMessage] = useState('Ready to make friends?')\r\n    const [displaySecMessage, setDisplaySecMessage] = useState('click match to connect!')\r\n\r\n    const handleClick = async () => {\r\n        setDisplayMessage('Finding...')\r\n        setDisplaySecMessage('please be patient.')\r\n        setLoader(true)\r\n        //clear matches\r\n        if (matches.length > 0) {\r\n            setMatches([])\r\n        }\r\n      \r\n        await db.collection(\"users\")\r\n       // .where(\"email\", \"!=\", currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                if (doc.data().email === currentUser.email) {\r\n                    // split interest into array by \", \"\r\n                    setUserInterest(doc.data().interest.toLowerCase().split(\", \"))\r\n                    setFriends(doc.data().friendList)\r\n                } else { \r\n                setMatches(matches => [...matches, doc.data()])\r\n                }\r\n            })\r\n        })\r\n        .then(() => console.log(\"successfully read all matches\"))\r\n        .catch((error) => console.log(\"Error in reading matches :\", error))\r\n        setLoader(false)\r\n        setDisplayMessage('')\r\n    }\r\n\r\n\r\n    return(\r\n        <div style={{textAlign:'center', width:'600px'}}>\r\n            <br/>\r\n            <div style={{overflowY:\"auto\", maxHeight: \"400px\"}}>\r\n                {\r\n                    matches.filter(match => {\r\n                        for (var i = 0; i < userInterest.length; i++) {\r\n                            const uInterest = userInterest[i]\r\n                            const mInterest = match.interest.toLowerCase()\r\n                            const mEmail = match.email\r\n                            \r\n                            // if they have similar interest and it is not a friend return the data\r\n                            if (mInterest.includes(uInterest) && !friends.includes(mEmail)) { \r\n                                return match\r\n                            }\r\n                        }\r\n                        return false;\r\n                    }).map(match =>(\r\n                        <MatchProfile key={match.email} userData={match}></MatchProfile>\r\n                    ))\r\n                }\r\n                <div>{displayMessage&&<Alert variant='light'>\r\n                    <Alert.Heading>{displayMessage}</Alert.Heading>\r\n                    <hr/>\r\n                    <p style={{margin:'0', padding:'0'}}>Matches are based on your interests.</p>\r\n                    {displaySecMessage}\r\n                </Alert>}</div>\r\n            </div>\r\n            {!loader && <button onClick={handleClick} style={{borderRadius:'25px', borderColor:'#ebebeb', \r\n            borderWidth:'0.25px', backgroundColor:'transparent', marginTop:'8%'}}>\r\n                <div>\r\n                   <img src={Image} alt=\"MATCH\" style={{height:\"110px\", width:'110px'}}></img>\r\n                </div>  \r\n            </button>}\r\n            <div style={{display:\"flex\", alignItems:\"center\", justifyContent:\"center\", marginTop:\"10%\"}}>\r\n                <PuffLoader loading={loader} color=\"#0d70e0\" size={150}></PuffLoader>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react'\r\nimport Match from '../components/Layout/Match'\r\nimport NavBar from '../components/Layout/NavBar'\r\n\r\n\r\nexport default function MatchPage() {\r\n\r\n    return(\r\n        <div>\r\n            <NavBar/>\r\n            <div style={{ display:'flex', justifyContent:'center', width:'100%'}}>\r\n                <Match/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useRef, useState, useEffect } from \"react\"\r\nimport { Form, Button, Card, Alert } from \"react-bootstrap\"\r\nimport { useAuth } from \"../../context/AuthContext\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport DisplayPhoto from \"../Layout/DisplayPhoto\"\r\nimport db from \"../../firebase.js\"\r\n\r\n/**\r\n * This component handles the update of profile page\r\n */\r\n\r\nexport default function UpdateProfile() {\r\n  const emailRef = useRef()\r\n  const passwordRef = useRef()\r\n  const passwordConfirmRef = useRef()\r\n  const { currentUser, updatePassword, updateEmail } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const history = useHistory()\r\n\r\n  const [email, setEmail] = useState(\"\")\r\n  const [firstName, setFirstName] = useState(\"\")\r\n  const [lastName, setLastName] = useState(\"\")\r\n  const [major, setMajor] = useState(\"\")\r\n  const [gender, setGender] = useState(\"Male\")\r\n  const [number, setNumber] = useState(\"\")\r\n  const [interest, setInterest] = useState(\"\")\r\n  const [bio, setBio] = useState(\"\")\r\n\r\n\r\n  // fetch data\r\n  useEffect(() => {\r\n    const fetchData = async () =>{\r\n        await db.collection(\"users\")\r\n        .where(\"email\",\"==\", currentUser.email)\r\n        .get()\r\n        .then(snap => {\r\n            snap.docs.forEach(doc => {\r\n                const userData  = doc.data()\r\n                setFirstName(userData.firstName)\r\n                setLastName(userData.lastName)\r\n                setMajor(userData.major)\r\n                setNumber(userData.phone)\r\n                setGender(userData.gender)\r\n                setEmail(userData.email)\r\n                setBio(userData.bio)\r\n                setInterest(userData.interest)\r\n                console.log(\"update-profile data successfully fetched from firestore.\")\r\n            })\r\n        })\r\n    }\r\n    fetchData()\r\n}, [currentUser.email])\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      return setError(\"Passwords do not match\")\r\n    }\r\n\r\n    const promises = []\r\n    setLoading(true)\r\n    setError(\"\")\r\n\r\n    if (emailRef.current.value !== currentUser.email) {\r\n      promises.push(updateEmail(emailRef.current.value))\r\n    }\r\n    if (passwordRef.current.value) {\r\n      promises.push(updatePassword(passwordRef.current.value))\r\n    }\r\n\r\n    await db.collection('users').doc(currentUser.email).update({\r\n      \"bio\": bio,\r\n      \"email\": email,\r\n      \"firstName\": firstName,\r\n      \"gender\": gender,\r\n      \"interest\": interest,\r\n      \"lastName\": lastName,\r\n      \"major\": major,\r\n      \"phone\": number\r\n    })\r\n    .then(() => console.log(\"update-profile successfully written into database.\"))\r\n    .catch((e) => console.error(\"Error writing document\", e))\r\n   \r\n    Promise.all(promises)\r\n      .then(() => {\r\n        history.push(\"/\")\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message)\r\n      })\r\n      .finally(() => {\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">Update Profile</h2>\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n            <DisplayPhoto></DisplayPhoto>\r\n            <Form onSubmit={handleSubmit}>\r\n\r\n            <Form.Group id=\"firstname\">\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control type=\"firstName\" defaultValue={firstName} required\r\n              onChange={e => {\r\n                setFirstName(e.target.value)\r\n              }}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"lastname\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control type=\"lastName\" defaultValue={lastName} required\r\n              onChange={e => {\r\n                setLastName(e.target.value)\r\n              }}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"major\">\r\n              <Form.Label>Major</Form.Label>\r\n              <Form.Control type=\"major\" defaultValue={major}\r\n              onChange={e => {\r\n                setMajor(e.target.value)\r\n              }}\r\n              required\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id= \"Gender\"> \r\n              <Form.Label>Gender  </Form.Label>\r\n                <select defaultValue={gender}>\r\n                  <option value= \"male\" onClick={e => setGender(e.target.value)}>Male</option>\r\n                  <option value= \"female\" onClick={e => setGender(e.target.value)}>Female</option>\r\n                </select>\r\n            </Form.Group>\r\n            \r\n            <Form.Group id=\"number\">\r\n               <Form.Label>Handphone Number</Form.Label>\r\n               <Form.Control type=\"8 digit number\" defaultValue={number} \r\n               onChange={e => {\r\n                setNumber(e.target.value)\r\n               }}\r\n               required/>\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                ref={emailRef}\r\n                required\r\n                defaultValue={currentUser.email}\r\n                onChange={e => {\r\n                  setEmail(e.target.value)\r\n                }}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"interest\">\r\n              <Form.Label>Interest</Form.Label>\r\n              <Form.Control type=\"interest\" defaultValue={interest} \r\n              onChange={e => {\r\n                setInterest(e.target.value)\r\n              }}\r\n              required\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"bio\">\r\n              <Form.Label>Bio</Form.Label>\r\n              <Form.Control type=\"Bio\" defaultValue={bio}\r\n              onChange={e => {\r\n                setBio(e.target.value)\r\n              }}\r\n              required\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                ref={passwordRef}\r\n                placeholder=\"Leave blank to keep the same\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group id=\"password-confirm\">\r\n              <Form.Label>Password Confirmation</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                ref={passwordConfirmRef}\r\n                placeholder=\"Leave blank to keep the same\"\r\n              />\r\n            </Form.Group>\r\n            <Button disabled={loading} className=\"w-100 mt-2\" type=\"submit\">\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        <Link to=\"/\">Cancel</Link>\r\n      </div>\r\n     \r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n","\r\nimport React, { useState, useRef, useEffect } from 'react'\r\nimport moment from 'moment'\r\n\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport db, { auth } from \"../../firebase.js\"\r\nimport firebase from 'firebase/app';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\r\nimport NavBar from '../Layout/NavBar'\r\nimport { Avatar, message } from 'antd'\r\nimport { UserOutlined, SendOutlined, UserAddOutlined } from '@ant-design/icons'\r\n      \r\n        export default function ChatRoom(data) {\r\n            const receiver = data.location.state\r\n            const { currentUser } = useAuth()\r\n\r\n            const collectionid = receiver.email + currentUser.email\r\n            const collectionid2 = currentUser.email + receiver.email\r\n            const messagesRef = db.collection(\"chats\").doc(\"all\").collection(collectionid)\r\n            const messageRef2 = db.collection(\"chats\").doc(\"all\").collection(collectionid2)\r\n           \r\n            var chatID = \"GROUPCHAT\" + collectionid2\r\n            while (receiver.chatList.includes(chatID)){ \r\n              chatID = chatID + \"i\"\r\n            }\r\n            \r\n            const query = messagesRef.orderBy('createdAt').limit(25);\r\n            \r\n            const [messages] = useCollectionData(query, { idField: 'id' });\r\n            const [formValue, setFormValue] = useState('');\r\n            const [disableAdd, setDisableAdd] = useState(false)\r\n          \r\n            const sendMessage = async (e) => {\r\n              e.preventDefault();\r\n              \r\n              // add to chatList only when a message is sent\r\n              addToChatList()\r\n\r\n              const message = formValue\r\n              setFormValue('');\r\n\r\n              await messagesRef.add({\r\n                text: message,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                time: moment().format('HH:mm'),\r\n                uid: currentUser.email,\r\n                rid: receiver.email,\r\n                \r\n\r\n              })\r\n              await messageRef2.add({\r\n                text: message,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                time: moment().format('HH:mm'),\r\n                uid: currentUser.email,\r\n                rid: receiver.email,\r\n              })\r\n             \r\n              setFormValue('');\r\n            }\r\n\r\n            const addToChatList = async () => {\r\n              if (!(receiver.chatList.includes(currentUser.email))){\r\n\r\n                // add currentuser email to receiver chat history \r\n                var tempChatList1 = receiver.chatList \r\n                tempChatList1.push(currentUser.email)\r\n                await db.collection('users') \r\n                  .doc(receiver.email) \r\n                  .update({chatList: tempChatList1})\r\n                \r\n                // query currentUser chatList \r\n                var tempChatList2 = []\r\n                await db.collection('users')\r\n                  .where('email', '==', currentUser.email)\r\n                  .get()\r\n                  .then(snap => {\r\n                    snap.docs.forEach(doc => {\r\n                      tempChatList2 = doc.data().chatList\r\n                    })\r\n                  }) \r\n                \r\n                // add receiver to currentUser chatList\r\n                tempChatList2.push(receiver.email)\r\n                await  db.collection('users') \r\n                  .doc(currentUser.email) \r\n                  .update({chatList: tempChatList2})\r\n                \r\n                console.log(\"new chat added\")\r\n              }\r\n            }\r\n\r\n            const handleAdd = async() => {\r\n              setDisableAdd(true)\r\n\r\n              var array = []\r\n              var isRequested = false\r\n              await db.collection('users')\r\n              .where('email', '==', receiver.email)\r\n              .get()\r\n              .then(snap => {\r\n                snap.docs.forEach(doc => {\r\n                  const friendreq = doc.data().friendRequest\r\n                  for (var i = 0; i < friendreq.length; i++) {\r\n                    if (friendreq[i] === currentUser.email) {\r\n                      message.error(\"Request is already sent.\", [2])\r\n                      isRequested = true\r\n                      break;\r\n                    }\r\n                  }\r\n                 if (!isRequested) array = [...friendreq, currentUser.email]\r\n                });\r\n              })\r\n              .then(() => console.log(\"fetched friend request.\"))\r\n\r\n              if (!isRequested) {\r\n                await db.collection('users')\r\n                .doc(receiver.email)\r\n                .update({friendRequest: array})\r\n                .then(() => console.log('friend request is added successfully.'))\r\n                message.success(\"Request has been sent.\", [4])\r\n              }\r\n              setDisableAdd(false)\r\n            }\r\n\r\n            const AlwaysScrollToBottom = () => {\r\n              const elementRef = useRef();\r\n              useEffect(() => elementRef.current.scrollIntoView())\r\n              return <div ref={elementRef} />\r\n            }\r\n          \r\n            return (\r\n              <div style={{height:'100%'}}>\r\n              <NavBar/>\r\n                <div style={{width:'50%', margin:'auto'}}>\r\n                  <div style={{display:'flex', borderWidth:'0.05px', border:'solid', borderColor:'#e3e3e3', backgroundColor:'#fbfbfb'}}>\r\n                    <div style={{float:'left', margin:'1%', marginLeft:'3%'}}>\r\n                      <Avatar size={50} src={receiver.image} icon={<UserOutlined/>}></Avatar>\r\n                    </div> \r\n                    <div style={{float:'left', marginTop:'2.5%', marginLeft:'3%'}}> \r\n                        <h4 className=\"mb-4\">{receiver.firstName + \" \" + receiver.lastName}</h4> \r\n                    </div>\r\n                  </div>\r\n                  <div style={{height:'80vh', border:'solid', borderWidth:'0.05px', borderColor:'#e3e3e3',  position:'relative'}}>                \r\n                    <main style={{overflowY:'auto', maxHeight:'76vh', flexDirection: \"column\"}}>\r\n                      {messages && messages.map(msg => <ChatMessage key={msg.id} id = {msg.id} message={msg} time = {msg.createdAt} />)}\r\n                      <AlwaysScrollToBottom/>\r\n                    </main>\r\n                    <div style={{position:'absolute', bottom:'3px', display:'flex', width:'100%', justifyContent:'space-between', \r\n                    verticalAlign:'middle', textAlign:'center'}}>\r\n                      <form onSubmit={sendMessage} style={{width:'100%', paddingTop:'0px'}}>\r\n                        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" \r\n                        style={{borderWidth:'0.5px', borderRadius:'20px', marginLeft:'1%', width:'92%', float:'left'}}/>\r\n                        <button type=\"submit\" disabled={!formValue} style={{borderWidth:'0px', float:'right', width:'4%',  marginRight:'1%'}}>\r\n                          <SendOutlined />\r\n                        </button>\r\n                      </form>\r\n                      <button disabled={disableAdd} style={{borderWidth:'0px', float:'right', backgroundColor:'white', marginRight:'2%'}}\r\n                        onClick={handleAdd}>\r\n                          <UserAddOutlined/>\r\n                      </button>\r\n                    \r\n                    </div>\r\n                  </div>\r\n                </div>\r\n            </div>)\r\n          }\r\n          \r\n\r\n\r\n          function ChatMessage(props) {\r\n            const { time, text, uid } = props.message;\r\n          \r\n            const messageClass = uid === auth.currentUser.email ? 'sent' : 'received';\r\n          \r\n            return (<div>\r\n              <div className={`message ${messageClass}`}>\r\n                <p>{text} <span style={{fontSize:'10px', fontFamily:'Courier New'}}>{time}</span></p>\r\n              </div>\r\n            </div>)\r\n          }\r\n\r\n          // function createGroupChat(name, creatorID, memberID) {\r\n          //   creatorNum = db.collection('users').doc(creatorID).phone\r\n          //   memberID = db.collection('users').doc(memberID).phone\r\n          //   chatID = creatorNum * 1000000 + memberID\r\n          //   var tempChatList = db.collection('users').doc(memberID).chatList\r\n          //   var tempChatList1 =  db.collection('users').doc(creatorID).chatList\r\n\r\n          //   db.collection(\"groupchats\").doc(\"all\").collection(chatID)\r\n          //   tempChatList.push(chatID)\r\n          //   tempChatList1.push(chatID)\r\n          //  db.collection('users') \r\n          //                 .doc(memberID) \r\n          //                 .update({chatList: tempChatList})\r\n          //   db.collection('users').doc(creatorID).update({chatList: tempChatList1})\r\n          \r\n          //   console.log(\"New Chat Created\")\r\n          \r\n        \r\n          // }\r\n","import React from \"react\"\r\nimport \"./style/css/App.css\"\r\nimport { AuthProvider } from \"./context/AuthContext\"\r\nimport { BrowserRouter as Router, Switch, Route } from\r\n'react-router-dom'\r\nimport PrivateRoute from \"./components/user/PrivateRoute\"\r\nimport Dashboard from \"./pages/Dashboard\"\r\nimport SignupPage from \"./pages/SignupPage\"\r\nimport LoginPage from \"./pages/LoginPage\"\r\nimport ForgotPasswordPage from \"./pages/ForgotPasswordPage\"\r\nimport ProfilePage from \"./pages/ProfilePage\"\r\nimport MatchPage from \"./pages/MatchPage\"\r\nimport UpdateProfile from \"../src/components/user/UpdateProfile\"\r\nimport Chat from \"./components/user/chat\"\r\nimport Groupchat from \"./components/user/groupchat\"\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n  \r\n    <Router>\r\n      <AuthProvider>\r\n        <Switch>\r\n        <PrivateRoute className=\"dashboard\" exact path='/' component={Dashboard}/>\r\n        <Route path=\"/signup\" component={SignupPage}/>\r\n        <Route path=\"/login\" component={LoginPage}/>\r\n        <Route path=\"/forgot-password\" component={ForgotPasswordPage}/>\r\n        <Route path=\"/profile\" component={ProfilePage}/>\r\n        <Route path='/update-profile' component={UpdateProfile}/>\r\n        <Route path='/match' component={MatchPage}/>\r\n        <Route path = \"/chat\" component ={Chat}/>\r\n        <Route path = '/groupchat' component={Groupchat}/>\r\n        </Switch>\r\n      </AuthProvider>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n  //</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}